/*
 * Copyright 2010 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.opta.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;
import net.spantree.kantoptimal.domain.*;
global HardSoftScoreHolder scoreHolder;

// Hard Constraints
rule "no empty slots"
    when
        TeamSlot(pokemon == null)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "no duplicates"
    when
        TeamSlot($pokemon1: pokemon, pokemon != null)
        TeamSlot(pokemon == $pokemon1)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "STAB (same-type-attack-bonus) against everything"
  when
        $type: Type()
        not (exists TeamSlot(pokemon != null, pokemon.isStrongAgainst($type) == true))
  then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// Soft Constraints

rule "fewest weaknesses"
    when
        $type: Type()
        TeamSlot(pokemon.isWeakAgainst($type), pokemon != null)

    then
        scoreHolder.addSoftConstraintMatch(kcontext, -1);
end